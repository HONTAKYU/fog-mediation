// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: .rpc/control.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include ".rpc/control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bitclave {

namespace {

const ::google::protobuf::Descriptor* Empty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Empty_reflection_ = NULL;
const ::google::protobuf::Descriptor* Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* Box_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Box_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Markers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Markers_reflection_ = NULL;
const ::google::protobuf::Descriptor* Name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Name_reflection_ = NULL;
const ::google::protobuf::Descriptor* Face_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Face_reflection_ = NULL;
const ::google::protobuf::Descriptor* Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Data_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc__2erpc_2fcontrol_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc__2erpc_2fcontrol_2eproto() {
  protobuf_AddDesc__2erpc_2fcontrol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      ".rpc/control.proto");
  GOOGLE_CHECK(file != NULL);
  Empty_descriptor_ = file->message_type(0);
  static const int Empty_offsets_[1] = {
  };
  Empty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Empty_descriptor_,
      Empty::internal_default_instance(),
      Empty_offsets_,
      -1,
      -1,
      -1,
      sizeof(Empty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _internal_metadata_));
  Frame_descriptor_ = file->message_type(1);
  static const int Frame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, image_),
  };
  Frame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Frame_descriptor_,
      Frame::internal_default_instance(),
      Frame_offsets_,
      -1,
      -1,
      -1,
      sizeof(Frame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _internal_metadata_));
  Box_descriptor_ = file->message_type(2);
  static const int Box_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, height_),
  };
  Box_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Box_descriptor_,
      Box::internal_default_instance(),
      Box_offsets_,
      -1,
      -1,
      -1,
      sizeof(Box),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Box, _internal_metadata_));
  Point_descriptor_ = file->message_type(3);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::internal_default_instance(),
      Point_offsets_,
      -1,
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_));
  Markers_descriptor_ = file->message_type(4);
  static const int Markers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Markers, points_),
  };
  Markers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Markers_descriptor_,
      Markers::internal_default_instance(),
      Markers_offsets_,
      -1,
      -1,
      -1,
      sizeof(Markers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Markers, _internal_metadata_));
  Name_descriptor_ = file->message_type(5);
  static const int Name_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name, quality_),
  };
  Name_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Name_descriptor_,
      Name::internal_default_instance(),
      Name_offsets_,
      -1,
      -1,
      -1,
      sizeof(Name),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Name, _internal_metadata_));
  Face_descriptor_ = file->message_type(6);
  static const int Face_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, markers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, names_),
  };
  Face_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Face_descriptor_,
      Face::internal_default_instance(),
      Face_offsets_,
      -1,
      -1,
      -1,
      sizeof(Face),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Face, _internal_metadata_));
  Data_descriptor_ = file->message_type(7);
  static const int Data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, faces_),
  };
  Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Data_descriptor_,
      Data::internal_default_instance(),
      Data_offsets_,
      -1,
      -1,
      -1,
      sizeof(Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Data, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc__2erpc_2fcontrol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Empty_descriptor_, Empty::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Frame_descriptor_, Frame::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Box_descriptor_, Box::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, Point::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Markers_descriptor_, Markers::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Name_descriptor_, Name::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Face_descriptor_, Face::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Data_descriptor_, Data::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile__2erpc_2fcontrol_2eproto() {
  Empty_default_instance_.Shutdown();
  delete Empty_reflection_;
  Frame_default_instance_.Shutdown();
  delete Frame_reflection_;
  Box_default_instance_.Shutdown();
  delete Box_reflection_;
  Point_default_instance_.Shutdown();
  delete Point_reflection_;
  Markers_default_instance_.Shutdown();
  delete Markers_reflection_;
  Name_default_instance_.Shutdown();
  delete Name_reflection_;
  Face_default_instance_.Shutdown();
  delete Face_reflection_;
  Data_default_instance_.Shutdown();
  delete Data_reflection_;
}

void protobuf_InitDefaults__2erpc_2fcontrol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Empty_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Frame_default_instance_.DefaultConstruct();
  Box_default_instance_.DefaultConstruct();
  Point_default_instance_.DefaultConstruct();
  Markers_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Name_default_instance_.DefaultConstruct();
  Face_default_instance_.DefaultConstruct();
  Data_default_instance_.DefaultConstruct();
  Empty_default_instance_.get_mutable()->InitAsDefaultInstance();
  Frame_default_instance_.get_mutable()->InitAsDefaultInstance();
  Box_default_instance_.get_mutable()->InitAsDefaultInstance();
  Point_default_instance_.get_mutable()->InitAsDefaultInstance();
  Markers_default_instance_.get_mutable()->InitAsDefaultInstance();
  Name_default_instance_.get_mutable()->InitAsDefaultInstance();
  Face_default_instance_.get_mutable()->InitAsDefaultInstance();
  Data_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults__2erpc_2fcontrol_2eproto_once_);
void protobuf_InitDefaults__2erpc_2fcontrol_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults__2erpc_2fcontrol_2eproto_once_,
                 &protobuf_InitDefaults__2erpc_2fcontrol_2eproto_impl);
}
void protobuf_AddDesc__2erpc_2fcontrol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022.rpc/control.proto\022\010bitclave\"\007\n\005Empty\""
    "\026\n\005Frame\022\r\n\005image\030\001 \001(\014\"\?\n\003Box\022\014\n\004left\030\001"
    " \001(\002\022\013\n\003top\030\002 \001(\002\022\r\n\005width\030\003 \001(\002\022\016\n\006heig"
    "ht\030\004 \001(\002\"\035\n\005Point\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\""
    "*\n\007Markers\022\037\n\006points\030\001 \003(\0132\017.bitclave.Po"
    "int\"%\n\004Name\022\014\n\004name\030\001 \001(\t\022\017\n\007quality\030\002 \001"
    "(\002\"e\n\004Face\022\032\n\003box\030\001 \001(\0132\r.bitclave.Box\022\""
    "\n\007markers\030\002 \001(\0132\021.bitclave.Markers\022\035\n\005na"
    "mes\030\003 \003(\0132\016.bitclave.Name\"%\n\004Data\022\035\n\005fac"
    "es\030\001 \003(\0132\016.bitclave.Face2o\n\rControlServe"
    "r\022/\n\tPostFrame\022\017.bitclave.Frame\032\017.bitcla"
    "ve.Empty\"\000\022-\n\010PostData\022\016.bitclave.Data\032\017"
    ".bitclave.Empty\"\000b\006proto3", 505);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    ".rpc/control.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile__2erpc_2fcontrol_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc__2erpc_2fcontrol_2eproto_once_);
void protobuf_AddDesc__2erpc_2fcontrol_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc__2erpc_2fcontrol_2eproto_once_,
                 &protobuf_AddDesc__2erpc_2fcontrol_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer__2erpc_2fcontrol_2eproto {
  StaticDescriptorInitializer__2erpc_2fcontrol_2eproto() {
    protobuf_AddDesc__2erpc_2fcontrol_2eproto();
  }
} static_descriptor_initializer__2erpc_2fcontrol_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitclave.Empty)
}

void Empty::InitAsDefaultInstance() {
}

Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bitclave.Empty)
}

void Empty::SharedCtor() {
  _cached_size_ = 0;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:bitclave.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
}

void Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Empty_descriptor_;
}

const Empty& Empty::default_instance() {
  protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Empty> Empty_default_instance_;

Empty* Empty::New(::google::protobuf::Arena* arena) const {
  Empty* n = new Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:bitclave.Empty)
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitclave.Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:bitclave.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitclave.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitclave.Empty)
  // @@protoc_insertion_point(serialize_end:bitclave.Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitclave.Empty)
  // @@protoc_insertion_point(serialize_to_array_end:bitclave.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitclave.Empty)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitclave.Empty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Empty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitclave.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitclave.Empty)
    UnsafeMergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitclave.Empty)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Empty::UnsafeMergeFrom(const Empty& from) {
  GOOGLE_DCHECK(&from != this);
}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitclave.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitclave.Empty)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Empty::IsInitialized() const {

  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Empty_descriptor_;
  metadata.reflection = Empty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

inline const Empty* Empty::internal_default_instance() {
  return &Empty_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitclave.Frame)
}

void Frame::InitAsDefaultInstance() {
}

Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bitclave.Frame)
}

void Frame::SharedCtor() {
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:bitclave.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Frame_descriptor_;
}

const Frame& Frame::default_instance() {
  protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Frame> Frame_default_instance_;

Frame* Frame::New(::google::protobuf::Arena* arena) const {
  Frame* n = new Frame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:bitclave.Frame)
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitclave.Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitclave.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitclave.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitclave.Frame)
  // optional bytes image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image(), output);
  }

  // @@protoc_insertion_point(serialize_end:bitclave.Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitclave.Frame)
  // optional bytes image = 1;
  if (this->image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->image(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitclave.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitclave.Frame)
  size_t total_size = 0;

  // optional bytes image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitclave.Frame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Frame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitclave.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitclave.Frame)
    UnsafeMergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitclave.Frame)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Frame::UnsafeMergeFrom(const Frame& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitclave.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitclave.Frame)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Frame::IsInitialized() const {

  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  image_.Swap(&other->image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Frame_descriptor_;
  metadata.reflection = Frame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Frame

// optional bytes image = 1;
void Frame::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Frame::image() const {
  // @@protoc_insertion_point(field_get:bitclave.Frame.image)
  return image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Frame::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitclave.Frame.image)
}
void Frame::set_image(const char* value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitclave.Frame.image)
}
void Frame::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitclave.Frame.image)
}
::std::string* Frame::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:bitclave.Frame.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Frame::release_image() {
  // @@protoc_insertion_point(field_release:bitclave.Frame.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Frame::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:bitclave.Frame.image)
}

inline const Frame* Frame::internal_default_instance() {
  return &Frame_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Box::kLeftFieldNumber;
const int Box::kTopFieldNumber;
const int Box::kWidthFieldNumber;
const int Box::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Box::Box()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitclave.Box)
}

void Box::InitAsDefaultInstance() {
}

Box::Box(const Box& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bitclave.Box)
}

void Box::SharedCtor() {
  ::memset(&left_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&left_) + sizeof(height_));
  _cached_size_ = 0;
}

Box::~Box() {
  // @@protoc_insertion_point(destructor:bitclave.Box)
  SharedDtor();
}

void Box::SharedDtor() {
}

void Box::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Box::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Box_descriptor_;
}

const Box& Box::default_instance() {
  protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Box> Box_default_instance_;

Box* Box::New(::google::protobuf::Arena* arena) const {
  Box* n = new Box;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Box::Clear() {
// @@protoc_insertion_point(message_clear_start:bitclave.Box)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Box, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Box*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(left_, height_);

#undef ZR_HELPER_
#undef ZR_

}

bool Box::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitclave.Box)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float left = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_top;
        break;
      }

      // optional float top = 2;
      case 2: {
        if (tag == 21) {
         parse_top:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_width;
        break;
      }

      // optional float width = 3;
      case 3: {
        if (tag == 29) {
         parse_width:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_height;
        break;
      }

      // optional float height = 4;
      case 4: {
        if (tag == 37) {
         parse_height:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitclave.Box)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitclave.Box)
  return false;
#undef DO_
}

void Box::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitclave.Box)
  // optional float left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left(), output);
  }

  // optional float top = 2;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->top(), output);
  }

  // optional float width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width(), output);
  }

  // optional float height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:bitclave.Box)
}

::google::protobuf::uint8* Box::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitclave.Box)
  // optional float left = 1;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left(), target);
  }

  // optional float top = 2;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->top(), target);
  }

  // optional float width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->width(), target);
  }

  // optional float height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitclave.Box)
  return target;
}

size_t Box::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitclave.Box)
  size_t total_size = 0;

  // optional float left = 1;
  if (this->left() != 0) {
    total_size += 1 + 4;
  }

  // optional float top = 2;
  if (this->top() != 0) {
    total_size += 1 + 4;
  }

  // optional float width = 3;
  if (this->width() != 0) {
    total_size += 1 + 4;
  }

  // optional float height = 4;
  if (this->height() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Box::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitclave.Box)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Box* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Box>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitclave.Box)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitclave.Box)
    UnsafeMergeFrom(*source);
  }
}

void Box::MergeFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitclave.Box)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Box::UnsafeMergeFrom(const Box& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Box::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitclave.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box::CopyFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitclave.Box)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Box::IsInitialized() const {

  return true;
}

void Box::Swap(Box* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Box::InternalSwap(Box* other) {
  std::swap(left_, other->left_);
  std::swap(top_, other->top_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Box::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Box_descriptor_;
  metadata.reflection = Box_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Box

// optional float left = 1;
void Box::clear_left() {
  left_ = 0;
}
float Box::left() const {
  // @@protoc_insertion_point(field_get:bitclave.Box.left)
  return left_;
}
void Box::set_left(float value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:bitclave.Box.left)
}

// optional float top = 2;
void Box::clear_top() {
  top_ = 0;
}
float Box::top() const {
  // @@protoc_insertion_point(field_get:bitclave.Box.top)
  return top_;
}
void Box::set_top(float value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:bitclave.Box.top)
}

// optional float width = 3;
void Box::clear_width() {
  width_ = 0;
}
float Box::width() const {
  // @@protoc_insertion_point(field_get:bitclave.Box.width)
  return width_;
}
void Box::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:bitclave.Box.width)
}

// optional float height = 4;
void Box::clear_height() {
  height_ = 0;
}
float Box::height() const {
  // @@protoc_insertion_point(field_get:bitclave.Box.height)
  return height_;
}
void Box::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:bitclave.Box.height)
}

inline const Box* Box::internal_default_instance() {
  return &Box_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitclave.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bitclave.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:bitclave.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Point> Point_default_instance_;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:bitclave.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitclave.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitclave.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitclave.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitclave.Point)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:bitclave.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitclave.Point)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitclave.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitclave.Point)
  size_t total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitclave.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitclave.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitclave.Point)
    UnsafeMergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitclave.Point)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Point::UnsafeMergeFrom(const Point& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitclave.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitclave.Point)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional float x = 1;
void Point::clear_x() {
  x_ = 0;
}
float Point::x() const {
  // @@protoc_insertion_point(field_get:bitclave.Point.x)
  return x_;
}
void Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:bitclave.Point.x)
}

// optional float y = 2;
void Point::clear_y() {
  y_ = 0;
}
float Point::y() const {
  // @@protoc_insertion_point(field_get:bitclave.Point.y)
  return y_;
}
void Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:bitclave.Point.y)
}

inline const Point* Point::internal_default_instance() {
  return &Point_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Markers::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Markers::Markers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitclave.Markers)
}

void Markers::InitAsDefaultInstance() {
}

Markers::Markers(const Markers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bitclave.Markers)
}

void Markers::SharedCtor() {
  _cached_size_ = 0;
}

Markers::~Markers() {
  // @@protoc_insertion_point(destructor:bitclave.Markers)
  SharedDtor();
}

void Markers::SharedDtor() {
}

void Markers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Markers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Markers_descriptor_;
}

const Markers& Markers::default_instance() {
  protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Markers> Markers_default_instance_;

Markers* Markers::New(::google::protobuf::Arena* arena) const {
  Markers* n = new Markers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Markers::Clear() {
// @@protoc_insertion_point(message_clear_start:bitclave.Markers)
  points_.Clear();
}

bool Markers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitclave.Markers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bitclave.Point points = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_points;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitclave.Markers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitclave.Markers)
  return false;
#undef DO_
}

void Markers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitclave.Markers)
  // repeated .bitclave.Point points = 1;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }

  // @@protoc_insertion_point(serialize_end:bitclave.Markers)
}

::google::protobuf::uint8* Markers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitclave.Markers)
  // repeated .bitclave.Point points = 1;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->points(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitclave.Markers)
  return target;
}

size_t Markers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitclave.Markers)
  size_t total_size = 0;

  // repeated .bitclave.Point points = 1;
  {
    unsigned int count = this->points_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Markers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitclave.Markers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Markers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Markers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitclave.Markers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitclave.Markers)
    UnsafeMergeFrom(*source);
  }
}

void Markers::MergeFrom(const Markers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitclave.Markers)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Markers::UnsafeMergeFrom(const Markers& from) {
  GOOGLE_DCHECK(&from != this);
  points_.MergeFrom(from.points_);
}

void Markers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitclave.Markers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Markers::CopyFrom(const Markers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitclave.Markers)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Markers::IsInitialized() const {

  return true;
}

void Markers::Swap(Markers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Markers::InternalSwap(Markers* other) {
  points_.UnsafeArenaSwap(&other->points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Markers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Markers_descriptor_;
  metadata.reflection = Markers_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Markers

// repeated .bitclave.Point points = 1;
int Markers::points_size() const {
  return points_.size();
}
void Markers::clear_points() {
  points_.Clear();
}
const ::bitclave::Point& Markers::points(int index) const {
  // @@protoc_insertion_point(field_get:bitclave.Markers.points)
  return points_.Get(index);
}
::bitclave::Point* Markers::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:bitclave.Markers.points)
  return points_.Mutable(index);
}
::bitclave::Point* Markers::add_points() {
  // @@protoc_insertion_point(field_add:bitclave.Markers.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::bitclave::Point >*
Markers::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:bitclave.Markers.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::bitclave::Point >&
Markers::points() const {
  // @@protoc_insertion_point(field_list:bitclave.Markers.points)
  return points_;
}

inline const Markers* Markers::internal_default_instance() {
  return &Markers_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Name::kNameFieldNumber;
const int Name::kQualityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Name::Name()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitclave.Name)
}

void Name::InitAsDefaultInstance() {
}

Name::Name(const Name& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bitclave.Name)
}

void Name::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_ = 0;
  _cached_size_ = 0;
}

Name::~Name() {
  // @@protoc_insertion_point(destructor:bitclave.Name)
  SharedDtor();
}

void Name::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Name_descriptor_;
}

const Name& Name::default_instance() {
  protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Name> Name_default_instance_;

Name* Name::New(::google::protobuf::Arena* arena) const {
  Name* n = new Name;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Name::Clear() {
// @@protoc_insertion_point(message_clear_start:bitclave.Name)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_ = 0;
}

bool Name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitclave.Name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bitclave.Name.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_quality;
        break;
      }

      // optional float quality = 2;
      case 2: {
        if (tag == 21) {
         parse_quality:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitclave.Name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitclave.Name)
  return false;
#undef DO_
}

void Name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitclave.Name)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitclave.Name.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional float quality = 2;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->quality(), output);
  }

  // @@protoc_insertion_point(serialize_end:bitclave.Name)
}

::google::protobuf::uint8* Name::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitclave.Name)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bitclave.Name.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float quality = 2;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->quality(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitclave.Name)
  return target;
}

size_t Name::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitclave.Name)
  size_t total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional float quality = 2;
  if (this->quality() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Name::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitclave.Name)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Name* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Name>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitclave.Name)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitclave.Name)
    UnsafeMergeFrom(*source);
  }
}

void Name::MergeFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitclave.Name)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Name::UnsafeMergeFrom(const Name& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.quality() != 0) {
    set_quality(from.quality());
  }
}

void Name::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitclave.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Name::CopyFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitclave.Name)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Name::IsInitialized() const {

  return true;
}

void Name::Swap(Name* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Name::InternalSwap(Name* other) {
  name_.Swap(&other->name_);
  std::swap(quality_, other->quality_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Name_descriptor_;
  metadata.reflection = Name_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Name

// optional string name = 1;
void Name::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Name::name() const {
  // @@protoc_insertion_point(field_get:bitclave.Name.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Name::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitclave.Name.name)
}
void Name::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitclave.Name.name)
}
void Name::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitclave.Name.name)
}
::std::string* Name::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:bitclave.Name.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Name::release_name() {
  // @@protoc_insertion_point(field_release:bitclave.Name.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Name::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bitclave.Name.name)
}

// optional float quality = 2;
void Name::clear_quality() {
  quality_ = 0;
}
float Name::quality() const {
  // @@protoc_insertion_point(field_get:bitclave.Name.quality)
  return quality_;
}
void Name::set_quality(float value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:bitclave.Name.quality)
}

inline const Name* Name::internal_default_instance() {
  return &Name_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Face::kBoxFieldNumber;
const int Face::kMarkersFieldNumber;
const int Face::kNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Face::Face()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitclave.Face)
}

void Face::InitAsDefaultInstance() {
  box_ = const_cast< ::bitclave::Box*>(
      ::bitclave::Box::internal_default_instance());
  markers_ = const_cast< ::bitclave::Markers*>(
      ::bitclave::Markers::internal_default_instance());
}

Face::Face(const Face& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bitclave.Face)
}

void Face::SharedCtor() {
  box_ = NULL;
  markers_ = NULL;
  _cached_size_ = 0;
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:bitclave.Face)
  SharedDtor();
}

void Face::SharedDtor() {
  if (this != &Face_default_instance_.get()) {
    delete box_;
    delete markers_;
  }
}

void Face::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Face::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Face_descriptor_;
}

const Face& Face::default_instance() {
  protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Face> Face_default_instance_;

Face* Face::New(::google::protobuf::Arena* arena) const {
  Face* n = new Face;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Face::Clear() {
// @@protoc_insertion_point(message_clear_start:bitclave.Face)
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
  if (GetArenaNoVirtual() == NULL && markers_ != NULL) delete markers_;
  markers_ = NULL;
  names_.Clear();
}

bool Face::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitclave.Face)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bitclave.Box box = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_box()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_markers;
        break;
      }

      // optional .bitclave.Markers markers = 2;
      case 2: {
        if (tag == 18) {
         parse_markers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_markers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_names;
        break;
      }

      // repeated .bitclave.Name names = 3;
      case 3: {
        if (tag == 26) {
         parse_names:
          DO_(input->IncrementRecursionDepth());
         parse_loop_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_names()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_names;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitclave.Face)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitclave.Face)
  return false;
#undef DO_
}

void Face::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitclave.Face)
  // optional .bitclave.Box box = 1;
  if (this->has_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->box_, output);
  }

  // optional .bitclave.Markers markers = 2;
  if (this->has_markers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->markers_, output);
  }

  // repeated .bitclave.Name names = 3;
  for (unsigned int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->names(i), output);
  }

  // @@protoc_insertion_point(serialize_end:bitclave.Face)
}

::google::protobuf::uint8* Face::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitclave.Face)
  // optional .bitclave.Box box = 1;
  if (this->has_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->box_, false, target);
  }

  // optional .bitclave.Markers markers = 2;
  if (this->has_markers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->markers_, false, target);
  }

  // repeated .bitclave.Name names = 3;
  for (unsigned int i = 0, n = this->names_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->names(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitclave.Face)
  return target;
}

size_t Face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitclave.Face)
  size_t total_size = 0;

  // optional .bitclave.Box box = 1;
  if (this->has_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->box_);
  }

  // optional .bitclave.Markers markers = 2;
  if (this->has_markers()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->markers_);
  }

  // repeated .bitclave.Name names = 3;
  {
    unsigned int count = this->names_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->names(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Face::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitclave.Face)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Face* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Face>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitclave.Face)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitclave.Face)
    UnsafeMergeFrom(*source);
  }
}

void Face::MergeFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitclave.Face)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Face::UnsafeMergeFrom(const Face& from) {
  GOOGLE_DCHECK(&from != this);
  names_.MergeFrom(from.names_);
  if (from.has_box()) {
    mutable_box()->::bitclave::Box::MergeFrom(from.box());
  }
  if (from.has_markers()) {
    mutable_markers()->::bitclave::Markers::MergeFrom(from.markers());
  }
}

void Face::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitclave.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Face::CopyFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitclave.Face)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Face::IsInitialized() const {

  return true;
}

void Face::Swap(Face* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Face::InternalSwap(Face* other) {
  std::swap(box_, other->box_);
  std::swap(markers_, other->markers_);
  names_.UnsafeArenaSwap(&other->names_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Face::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Face_descriptor_;
  metadata.reflection = Face_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Face

// optional .bitclave.Box box = 1;
bool Face::has_box() const {
  return this != internal_default_instance() && box_ != NULL;
}
void Face::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
}
const ::bitclave::Box& Face::box() const {
  // @@protoc_insertion_point(field_get:bitclave.Face.box)
  return box_ != NULL ? *box_
                         : *::bitclave::Box::internal_default_instance();
}
::bitclave::Box* Face::mutable_box() {
  
  if (box_ == NULL) {
    box_ = new ::bitclave::Box;
  }
  // @@protoc_insertion_point(field_mutable:bitclave.Face.box)
  return box_;
}
::bitclave::Box* Face::release_box() {
  // @@protoc_insertion_point(field_release:bitclave.Face.box)
  
  ::bitclave::Box* temp = box_;
  box_ = NULL;
  return temp;
}
void Face::set_allocated_box(::bitclave::Box* box) {
  delete box_;
  box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bitclave.Face.box)
}

// optional .bitclave.Markers markers = 2;
bool Face::has_markers() const {
  return this != internal_default_instance() && markers_ != NULL;
}
void Face::clear_markers() {
  if (GetArenaNoVirtual() == NULL && markers_ != NULL) delete markers_;
  markers_ = NULL;
}
const ::bitclave::Markers& Face::markers() const {
  // @@protoc_insertion_point(field_get:bitclave.Face.markers)
  return markers_ != NULL ? *markers_
                         : *::bitclave::Markers::internal_default_instance();
}
::bitclave::Markers* Face::mutable_markers() {
  
  if (markers_ == NULL) {
    markers_ = new ::bitclave::Markers;
  }
  // @@protoc_insertion_point(field_mutable:bitclave.Face.markers)
  return markers_;
}
::bitclave::Markers* Face::release_markers() {
  // @@protoc_insertion_point(field_release:bitclave.Face.markers)
  
  ::bitclave::Markers* temp = markers_;
  markers_ = NULL;
  return temp;
}
void Face::set_allocated_markers(::bitclave::Markers* markers) {
  delete markers_;
  markers_ = markers;
  if (markers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bitclave.Face.markers)
}

// repeated .bitclave.Name names = 3;
int Face::names_size() const {
  return names_.size();
}
void Face::clear_names() {
  names_.Clear();
}
const ::bitclave::Name& Face::names(int index) const {
  // @@protoc_insertion_point(field_get:bitclave.Face.names)
  return names_.Get(index);
}
::bitclave::Name* Face::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:bitclave.Face.names)
  return names_.Mutable(index);
}
::bitclave::Name* Face::add_names() {
  // @@protoc_insertion_point(field_add:bitclave.Face.names)
  return names_.Add();
}
::google::protobuf::RepeatedPtrField< ::bitclave::Name >*
Face::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:bitclave.Face.names)
  return &names_;
}
const ::google::protobuf::RepeatedPtrField< ::bitclave::Name >&
Face::names() const {
  // @@protoc_insertion_point(field_list:bitclave.Face.names)
  return names_;
}

inline const Face* Face::internal_default_instance() {
  return &Face_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Data::kFacesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Data::Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bitclave.Data)
}

void Data::InitAsDefaultInstance() {
}

Data::Data(const Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bitclave.Data)
}

void Data::SharedCtor() {
  _cached_size_ = 0;
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:bitclave.Data)
  SharedDtor();
}

void Data::SharedDtor() {
}

void Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Data_descriptor_;
}

const Data& Data::default_instance() {
  protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Data> Data_default_instance_;

Data* Data::New(::google::protobuf::Arena* arena) const {
  Data* n = new Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:bitclave.Data)
  faces_.Clear();
}

bool Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bitclave.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bitclave.Face faces = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_faces;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bitclave.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bitclave.Data)
  return false;
#undef DO_
}

void Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bitclave.Data)
  // repeated .bitclave.Face faces = 1;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->faces(i), output);
  }

  // @@protoc_insertion_point(serialize_end:bitclave.Data)
}

::google::protobuf::uint8* Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bitclave.Data)
  // repeated .bitclave.Face faces = 1;
  for (unsigned int i = 0, n = this->faces_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->faces(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bitclave.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitclave.Data)
  size_t total_size = 0;

  // repeated .bitclave.Face faces = 1;
  {
    unsigned int count = this->faces_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->faces(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bitclave.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bitclave.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bitclave.Data)
    UnsafeMergeFrom(*source);
  }
}

void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitclave.Data)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Data::UnsafeMergeFrom(const Data& from) {
  GOOGLE_DCHECK(&from != this);
  faces_.MergeFrom(from.faces_);
}

void Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bitclave.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitclave.Data)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Data::IsInitialized() const {

  return true;
}

void Data::Swap(Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Data::InternalSwap(Data* other) {
  faces_.UnsafeArenaSwap(&other->faces_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Data_descriptor_;
  metadata.reflection = Data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Data

// repeated .bitclave.Face faces = 1;
int Data::faces_size() const {
  return faces_.size();
}
void Data::clear_faces() {
  faces_.Clear();
}
const ::bitclave::Face& Data::faces(int index) const {
  // @@protoc_insertion_point(field_get:bitclave.Data.faces)
  return faces_.Get(index);
}
::bitclave::Face* Data::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:bitclave.Data.faces)
  return faces_.Mutable(index);
}
::bitclave::Face* Data::add_faces() {
  // @@protoc_insertion_point(field_add:bitclave.Data.faces)
  return faces_.Add();
}
::google::protobuf::RepeatedPtrField< ::bitclave::Face >*
Data::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:bitclave.Data.faces)
  return &faces_;
}
const ::google::protobuf::RepeatedPtrField< ::bitclave::Face >&
Data::faces() const {
  // @@protoc_insertion_point(field_list:bitclave.Data.faces)
  return faces_;
}

inline const Data* Data::internal_default_instance() {
  return &Data_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bitclave

// @@protoc_insertion_point(global_scope)

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: .rpc/control.proto

#include ".rpc/control.pb.h"
#include ".rpc/control.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace bitclave {

static const char* ControlServer_method_names[] = {
  "/bitclave.ControlServer/PostFrame",
  "/bitclave.ControlServer/PostData",
};

std::unique_ptr< ControlServer::Stub> ControlServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< ControlServer::Stub> stub(new ControlServer::Stub(channel));
  return stub;
}

ControlServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PostFrame_(ControlServer_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PostData_(ControlServer_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ControlServer::Stub::PostFrame(::grpc::ClientContext* context, const ::bitclave::Frame& request, ::bitclave::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PostFrame_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bitclave::Empty>* ControlServer::Stub::AsyncPostFrameRaw(::grpc::ClientContext* context, const ::bitclave::Frame& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bitclave::Empty>(channel_.get(), cq, rpcmethod_PostFrame_, context, request);
}

::grpc::Status ControlServer::Stub::PostData(::grpc::ClientContext* context, const ::bitclave::Data& request, ::bitclave::Empty* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PostData_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bitclave::Empty>* ControlServer::Stub::AsyncPostDataRaw(::grpc::ClientContext* context, const ::bitclave::Data& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bitclave::Empty>(channel_.get(), cq, rpcmethod_PostData_, context, request);
}

ControlServer::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      ControlServer_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ControlServer::Service, ::bitclave::Frame, ::bitclave::Empty>(
          std::mem_fn(&ControlServer::Service::PostFrame), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      ControlServer_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ControlServer::Service, ::bitclave::Data, ::bitclave::Empty>(
          std::mem_fn(&ControlServer::Service::PostData), this)));
}

ControlServer::Service::~Service() {
}

::grpc::Status ControlServer::Service::PostFrame(::grpc::ServerContext* context, const ::bitclave::Frame* request, ::bitclave::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ControlServer::Service::PostData(::grpc::ServerContext* context, const ::bitclave::Data* request, ::bitclave::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bitclave


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: .rpc/control.proto

#ifndef PROTOBUF__2erpc_2fcontrol_2eproto__INCLUDED
#define PROTOBUF__2erpc_2fcontrol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace bitclave {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc__2erpc_2fcontrol_2eproto();
void protobuf_InitDefaults__2erpc_2fcontrol_2eproto();
void protobuf_AssignDesc__2erpc_2fcontrol_2eproto();
void protobuf_ShutdownFile__2erpc_2fcontrol_2eproto();

class Box;
class Data;
class Empty;
class Face;
class Frame;
class Markers;
class Name;
class Point;

// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitclave.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static const Empty* internal_default_instance();

  void Swap(Empty* other);

  // implements Message ----------------------------------------------

  inline Empty* New() const { return New(NULL); }

  Empty* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Empty* other);
  void UnsafeMergeFrom(const Empty& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bitclave.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults__2erpc_2fcontrol_2eproto_impl();
  friend void  protobuf_AddDesc__2erpc_2fcontrol_2eproto_impl();
  friend void protobuf_AssignDesc__2erpc_2fcontrol_2eproto();
  friend void protobuf_ShutdownFile__2erpc_2fcontrol_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Empty> Empty_default_instance_;

// -------------------------------------------------------------------

class Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitclave.Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  static const Frame* internal_default_instance();

  void Swap(Frame* other);

  // implements Message ----------------------------------------------

  inline Frame* New() const { return New(NULL); }

  Frame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Frame* other);
  void UnsafeMergeFrom(const Frame& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes image = 1;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::std::string& image() const;
  void set_image(const ::std::string& value);
  void set_image(const char* value);
  void set_image(const void* value, size_t size);
  ::std::string* mutable_image();
  ::std::string* release_image();
  void set_allocated_image(::std::string* image);

  // @@protoc_insertion_point(class_scope:bitclave.Frame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr image_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults__2erpc_2fcontrol_2eproto_impl();
  friend void  protobuf_AddDesc__2erpc_2fcontrol_2eproto_impl();
  friend void protobuf_AssignDesc__2erpc_2fcontrol_2eproto();
  friend void protobuf_ShutdownFile__2erpc_2fcontrol_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Frame> Frame_default_instance_;

// -------------------------------------------------------------------

class Box : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitclave.Box) */ {
 public:
  Box();
  virtual ~Box();

  Box(const Box& from);

  inline Box& operator=(const Box& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Box& default_instance();

  static const Box* internal_default_instance();

  void Swap(Box* other);

  // implements Message ----------------------------------------------

  inline Box* New() const { return New(NULL); }

  Box* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Box& from);
  void MergeFrom(const Box& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Box* other);
  void UnsafeMergeFrom(const Box& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float left = 1;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  float left() const;
  void set_left(float value);

  // optional float top = 2;
  void clear_top();
  static const int kTopFieldNumber = 2;
  float top() const;
  void set_top(float value);

  // optional float width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  float width() const;
  void set_width(float value);

  // optional float height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  float height() const;
  void set_height(float value);

  // @@protoc_insertion_point(class_scope:bitclave.Box)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float left_;
  float top_;
  float width_;
  float height_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults__2erpc_2fcontrol_2eproto_impl();
  friend void  protobuf_AddDesc__2erpc_2fcontrol_2eproto_impl();
  friend void protobuf_AssignDesc__2erpc_2fcontrol_2eproto();
  friend void protobuf_ShutdownFile__2erpc_2fcontrol_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Box> Box_default_instance_;

// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitclave.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static const Point* internal_default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  inline Point* New() const { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point* other);
  void UnsafeMergeFrom(const Point& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:bitclave.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults__2erpc_2fcontrol_2eproto_impl();
  friend void  protobuf_AddDesc__2erpc_2fcontrol_2eproto_impl();
  friend void protobuf_AssignDesc__2erpc_2fcontrol_2eproto();
  friend void protobuf_ShutdownFile__2erpc_2fcontrol_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Point> Point_default_instance_;

// -------------------------------------------------------------------

class Markers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitclave.Markers) */ {
 public:
  Markers();
  virtual ~Markers();

  Markers(const Markers& from);

  inline Markers& operator=(const Markers& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Markers& default_instance();

  static const Markers* internal_default_instance();

  void Swap(Markers* other);

  // implements Message ----------------------------------------------

  inline Markers* New() const { return New(NULL); }

  Markers* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Markers& from);
  void MergeFrom(const Markers& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Markers* other);
  void UnsafeMergeFrom(const Markers& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bitclave.Point points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  const ::bitclave::Point& points(int index) const;
  ::bitclave::Point* mutable_points(int index);
  ::bitclave::Point* add_points();
  ::google::protobuf::RepeatedPtrField< ::bitclave::Point >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::bitclave::Point >&
      points() const;

  // @@protoc_insertion_point(class_scope:bitclave.Markers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::bitclave::Point > points_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults__2erpc_2fcontrol_2eproto_impl();
  friend void  protobuf_AddDesc__2erpc_2fcontrol_2eproto_impl();
  friend void protobuf_AssignDesc__2erpc_2fcontrol_2eproto();
  friend void protobuf_ShutdownFile__2erpc_2fcontrol_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Markers> Markers_default_instance_;

// -------------------------------------------------------------------

class Name : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitclave.Name) */ {
 public:
  Name();
  virtual ~Name();

  Name(const Name& from);

  inline Name& operator=(const Name& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Name& default_instance();

  static const Name* internal_default_instance();

  void Swap(Name* other);

  // implements Message ----------------------------------------------

  inline Name* New() const { return New(NULL); }

  Name* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Name& from);
  void MergeFrom(const Name& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Name* other);
  void UnsafeMergeFrom(const Name& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional float quality = 2;
  void clear_quality();
  static const int kQualityFieldNumber = 2;
  float quality() const;
  void set_quality(float value);

  // @@protoc_insertion_point(class_scope:bitclave.Name)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float quality_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults__2erpc_2fcontrol_2eproto_impl();
  friend void  protobuf_AddDesc__2erpc_2fcontrol_2eproto_impl();
  friend void protobuf_AssignDesc__2erpc_2fcontrol_2eproto();
  friend void protobuf_ShutdownFile__2erpc_2fcontrol_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Name> Name_default_instance_;

// -------------------------------------------------------------------

class Face : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitclave.Face) */ {
 public:
  Face();
  virtual ~Face();

  Face(const Face& from);

  inline Face& operator=(const Face& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Face& default_instance();

  static const Face* internal_default_instance();

  void Swap(Face* other);

  // implements Message ----------------------------------------------

  inline Face* New() const { return New(NULL); }

  Face* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Face& from);
  void MergeFrom(const Face& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Face* other);
  void UnsafeMergeFrom(const Face& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bitclave.Box box = 1;
  bool has_box() const;
  void clear_box();
  static const int kBoxFieldNumber = 1;
  const ::bitclave::Box& box() const;
  ::bitclave::Box* mutable_box();
  ::bitclave::Box* release_box();
  void set_allocated_box(::bitclave::Box* box);

  // optional .bitclave.Markers markers = 2;
  bool has_markers() const;
  void clear_markers();
  static const int kMarkersFieldNumber = 2;
  const ::bitclave::Markers& markers() const;
  ::bitclave::Markers* mutable_markers();
  ::bitclave::Markers* release_markers();
  void set_allocated_markers(::bitclave::Markers* markers);

  // repeated .bitclave.Name names = 3;
  int names_size() const;
  void clear_names();
  static const int kNamesFieldNumber = 3;
  const ::bitclave::Name& names(int index) const;
  ::bitclave::Name* mutable_names(int index);
  ::bitclave::Name* add_names();
  ::google::protobuf::RepeatedPtrField< ::bitclave::Name >*
      mutable_names();
  const ::google::protobuf::RepeatedPtrField< ::bitclave::Name >&
      names() const;

  // @@protoc_insertion_point(class_scope:bitclave.Face)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::bitclave::Name > names_;
  ::bitclave::Box* box_;
  ::bitclave::Markers* markers_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults__2erpc_2fcontrol_2eproto_impl();
  friend void  protobuf_AddDesc__2erpc_2fcontrol_2eproto_impl();
  friend void protobuf_AssignDesc__2erpc_2fcontrol_2eproto();
  friend void protobuf_ShutdownFile__2erpc_2fcontrol_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Face> Face_default_instance_;

// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bitclave.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  static const Data* internal_default_instance();

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  inline Data* New() const { return New(NULL); }

  Data* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Data* other);
  void UnsafeMergeFrom(const Data& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bitclave.Face faces = 1;
  int faces_size() const;
  void clear_faces();
  static const int kFacesFieldNumber = 1;
  const ::bitclave::Face& faces(int index) const;
  ::bitclave::Face* mutable_faces(int index);
  ::bitclave::Face* add_faces();
  ::google::protobuf::RepeatedPtrField< ::bitclave::Face >*
      mutable_faces();
  const ::google::protobuf::RepeatedPtrField< ::bitclave::Face >&
      faces() const;

  // @@protoc_insertion_point(class_scope:bitclave.Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::bitclave::Face > faces_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults__2erpc_2fcontrol_2eproto_impl();
  friend void  protobuf_AddDesc__2erpc_2fcontrol_2eproto_impl();
  friend void protobuf_AssignDesc__2erpc_2fcontrol_2eproto();
  friend void protobuf_ShutdownFile__2erpc_2fcontrol_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Data> Data_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

inline const Empty* Empty::internal_default_instance() {
  return &Empty_default_instance_.get();
}
// -------------------------------------------------------------------

// Frame

// optional bytes image = 1;
inline void Frame::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Frame::image() const {
  // @@protoc_insertion_point(field_get:bitclave.Frame.image)
  return image_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Frame::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitclave.Frame.image)
}
inline void Frame::set_image(const char* value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitclave.Frame.image)
}
inline void Frame::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitclave.Frame.image)
}
inline ::std::string* Frame::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:bitclave.Frame.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Frame::release_image() {
  // @@protoc_insertion_point(field_release:bitclave.Frame.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Frame::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:bitclave.Frame.image)
}

inline const Frame* Frame::internal_default_instance() {
  return &Frame_default_instance_.get();
}
// -------------------------------------------------------------------

// Box

// optional float left = 1;
inline void Box::clear_left() {
  left_ = 0;
}
inline float Box::left() const {
  // @@protoc_insertion_point(field_get:bitclave.Box.left)
  return left_;
}
inline void Box::set_left(float value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:bitclave.Box.left)
}

// optional float top = 2;
inline void Box::clear_top() {
  top_ = 0;
}
inline float Box::top() const {
  // @@protoc_insertion_point(field_get:bitclave.Box.top)
  return top_;
}
inline void Box::set_top(float value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:bitclave.Box.top)
}

// optional float width = 3;
inline void Box::clear_width() {
  width_ = 0;
}
inline float Box::width() const {
  // @@protoc_insertion_point(field_get:bitclave.Box.width)
  return width_;
}
inline void Box::set_width(float value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:bitclave.Box.width)
}

// optional float height = 4;
inline void Box::clear_height() {
  height_ = 0;
}
inline float Box::height() const {
  // @@protoc_insertion_point(field_get:bitclave.Box.height)
  return height_;
}
inline void Box::set_height(float value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:bitclave.Box.height)
}

inline const Box* Box::internal_default_instance() {
  return &Box_default_instance_.get();
}
// -------------------------------------------------------------------

// Point

// optional float x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:bitclave.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:bitclave.Point.x)
}

// optional float y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:bitclave.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:bitclave.Point.y)
}

inline const Point* Point::internal_default_instance() {
  return &Point_default_instance_.get();
}
// -------------------------------------------------------------------

// Markers

// repeated .bitclave.Point points = 1;
inline int Markers::points_size() const {
  return points_.size();
}
inline void Markers::clear_points() {
  points_.Clear();
}
inline const ::bitclave::Point& Markers::points(int index) const {
  // @@protoc_insertion_point(field_get:bitclave.Markers.points)
  return points_.Get(index);
}
inline ::bitclave::Point* Markers::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:bitclave.Markers.points)
  return points_.Mutable(index);
}
inline ::bitclave::Point* Markers::add_points() {
  // @@protoc_insertion_point(field_add:bitclave.Markers.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::bitclave::Point >*
Markers::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:bitclave.Markers.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::bitclave::Point >&
Markers::points() const {
  // @@protoc_insertion_point(field_list:bitclave.Markers.points)
  return points_;
}

inline const Markers* Markers::internal_default_instance() {
  return &Markers_default_instance_.get();
}
// -------------------------------------------------------------------

// Name

// optional string name = 1;
inline void Name::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Name::name() const {
  // @@protoc_insertion_point(field_get:bitclave.Name.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Name::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bitclave.Name.name)
}
inline void Name::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bitclave.Name.name)
}
inline void Name::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bitclave.Name.name)
}
inline ::std::string* Name::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:bitclave.Name.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Name::release_name() {
  // @@protoc_insertion_point(field_release:bitclave.Name.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Name::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bitclave.Name.name)
}

// optional float quality = 2;
inline void Name::clear_quality() {
  quality_ = 0;
}
inline float Name::quality() const {
  // @@protoc_insertion_point(field_get:bitclave.Name.quality)
  return quality_;
}
inline void Name::set_quality(float value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:bitclave.Name.quality)
}

inline const Name* Name::internal_default_instance() {
  return &Name_default_instance_.get();
}
// -------------------------------------------------------------------

// Face

// optional .bitclave.Box box = 1;
inline bool Face::has_box() const {
  return this != internal_default_instance() && box_ != NULL;
}
inline void Face::clear_box() {
  if (GetArenaNoVirtual() == NULL && box_ != NULL) delete box_;
  box_ = NULL;
}
inline const ::bitclave::Box& Face::box() const {
  // @@protoc_insertion_point(field_get:bitclave.Face.box)
  return box_ != NULL ? *box_
                         : *::bitclave::Box::internal_default_instance();
}
inline ::bitclave::Box* Face::mutable_box() {
  
  if (box_ == NULL) {
    box_ = new ::bitclave::Box;
  }
  // @@protoc_insertion_point(field_mutable:bitclave.Face.box)
  return box_;
}
inline ::bitclave::Box* Face::release_box() {
  // @@protoc_insertion_point(field_release:bitclave.Face.box)
  
  ::bitclave::Box* temp = box_;
  box_ = NULL;
  return temp;
}
inline void Face::set_allocated_box(::bitclave::Box* box) {
  delete box_;
  box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bitclave.Face.box)
}

// optional .bitclave.Markers markers = 2;
inline bool Face::has_markers() const {
  return this != internal_default_instance() && markers_ != NULL;
}
inline void Face::clear_markers() {
  if (GetArenaNoVirtual() == NULL && markers_ != NULL) delete markers_;
  markers_ = NULL;
}
inline const ::bitclave::Markers& Face::markers() const {
  // @@protoc_insertion_point(field_get:bitclave.Face.markers)
  return markers_ != NULL ? *markers_
                         : *::bitclave::Markers::internal_default_instance();
}
inline ::bitclave::Markers* Face::mutable_markers() {
  
  if (markers_ == NULL) {
    markers_ = new ::bitclave::Markers;
  }
  // @@protoc_insertion_point(field_mutable:bitclave.Face.markers)
  return markers_;
}
inline ::bitclave::Markers* Face::release_markers() {
  // @@protoc_insertion_point(field_release:bitclave.Face.markers)
  
  ::bitclave::Markers* temp = markers_;
  markers_ = NULL;
  return temp;
}
inline void Face::set_allocated_markers(::bitclave::Markers* markers) {
  delete markers_;
  markers_ = markers;
  if (markers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bitclave.Face.markers)
}

// repeated .bitclave.Name names = 3;
inline int Face::names_size() const {
  return names_.size();
}
inline void Face::clear_names() {
  names_.Clear();
}
inline const ::bitclave::Name& Face::names(int index) const {
  // @@protoc_insertion_point(field_get:bitclave.Face.names)
  return names_.Get(index);
}
inline ::bitclave::Name* Face::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:bitclave.Face.names)
  return names_.Mutable(index);
}
inline ::bitclave::Name* Face::add_names() {
  // @@protoc_insertion_point(field_add:bitclave.Face.names)
  return names_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::bitclave::Name >*
Face::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:bitclave.Face.names)
  return &names_;
}
inline const ::google::protobuf::RepeatedPtrField< ::bitclave::Name >&
Face::names() const {
  // @@protoc_insertion_point(field_list:bitclave.Face.names)
  return names_;
}

inline const Face* Face::internal_default_instance() {
  return &Face_default_instance_.get();
}
// -------------------------------------------------------------------

// Data

// repeated .bitclave.Face faces = 1;
inline int Data::faces_size() const {
  return faces_.size();
}
inline void Data::clear_faces() {
  faces_.Clear();
}
inline const ::bitclave::Face& Data::faces(int index) const {
  // @@protoc_insertion_point(field_get:bitclave.Data.faces)
  return faces_.Get(index);
}
inline ::bitclave::Face* Data::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:bitclave.Data.faces)
  return faces_.Mutable(index);
}
inline ::bitclave::Face* Data::add_faces() {
  // @@protoc_insertion_point(field_add:bitclave.Data.faces)
  return faces_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::bitclave::Face >*
Data::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:bitclave.Data.faces)
  return &faces_;
}
inline const ::google::protobuf::RepeatedPtrField< ::bitclave::Face >&
Data::faces() const {
  // @@protoc_insertion_point(field_list:bitclave.Data.faces)
  return faces_;
}

inline const Data* Data::internal_default_instance() {
  return &Data_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bitclave

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF__2erpc_2fcontrol_2eproto__INCLUDED

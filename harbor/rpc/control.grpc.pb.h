// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: .rpc/control.proto
#ifndef GRPC__2erpc_2fcontrol_2eproto__INCLUDED
#define GRPC__2erpc_2fcontrol_2eproto__INCLUDED

#include ".rpc/control.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace bitclave {

class ControlServer final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status PostFrame(::grpc::ClientContext* context, const ::bitclave::Frame& request, ::bitclave::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bitclave::Empty>> AsyncPostFrame(::grpc::ClientContext* context, const ::bitclave::Frame& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bitclave::Empty>>(AsyncPostFrameRaw(context, request, cq));
    }
    virtual ::grpc::Status PostData(::grpc::ClientContext* context, const ::bitclave::Data& request, ::bitclave::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bitclave::Empty>> AsyncPostData(::grpc::ClientContext* context, const ::bitclave::Data& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bitclave::Empty>>(AsyncPostDataRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bitclave::Empty>* AsyncPostFrameRaw(::grpc::ClientContext* context, const ::bitclave::Frame& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bitclave::Empty>* AsyncPostDataRaw(::grpc::ClientContext* context, const ::bitclave::Data& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status PostFrame(::grpc::ClientContext* context, const ::bitclave::Frame& request, ::bitclave::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bitclave::Empty>> AsyncPostFrame(::grpc::ClientContext* context, const ::bitclave::Frame& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bitclave::Empty>>(AsyncPostFrameRaw(context, request, cq));
    }
    ::grpc::Status PostData(::grpc::ClientContext* context, const ::bitclave::Data& request, ::bitclave::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bitclave::Empty>> AsyncPostData(::grpc::ClientContext* context, const ::bitclave::Data& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bitclave::Empty>>(AsyncPostDataRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::bitclave::Empty>* AsyncPostFrameRaw(::grpc::ClientContext* context, const ::bitclave::Frame& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bitclave::Empty>* AsyncPostDataRaw(::grpc::ClientContext* context, const ::bitclave::Data& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_PostFrame_;
    const ::grpc::RpcMethod rpcmethod_PostData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PostFrame(::grpc::ServerContext* context, const ::bitclave::Frame* request, ::bitclave::Empty* response);
    virtual ::grpc::Status PostData(::grpc::ServerContext* context, const ::bitclave::Data* request, ::bitclave::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PostFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostFrame() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PostFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostFrame(::grpc::ServerContext* context, const ::bitclave::Frame* request, ::bitclave::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostFrame(::grpc::ServerContext* context, ::bitclave::Frame* request, ::grpc::ServerAsyncResponseWriter< ::bitclave::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostData() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PostData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostData(::grpc::ServerContext* context, const ::bitclave::Data* request, ::bitclave::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostData(::grpc::ServerContext* context, ::bitclave::Data* request, ::grpc::ServerAsyncResponseWriter< ::bitclave::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PostFrame<WithAsyncMethod_PostData<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_PostFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostFrame() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PostFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostFrame(::grpc::ServerContext* context, const ::bitclave::Frame* request, ::bitclave::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostData() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PostData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostData(::grpc::ServerContext* context, const ::bitclave::Data* request, ::bitclave::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostFrame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostFrame() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::bitclave::Frame, ::bitclave::Empty>(std::bind(&WithStreamedUnaryMethod_PostFrame<BaseClass>::StreamedPostFrame, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostFrame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostFrame(::grpc::ServerContext* context, const ::bitclave::Frame* request, ::bitclave::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostFrame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bitclave::Frame,::bitclave::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostData() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::bitclave::Data, ::bitclave::Empty>(std::bind(&WithStreamedUnaryMethod_PostData<BaseClass>::StreamedPostData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostData(::grpc::ServerContext* context, const ::bitclave::Data* request, ::bitclave::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bitclave::Data,::bitclave::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PostFrame<WithStreamedUnaryMethod_PostData<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PostFrame<WithStreamedUnaryMethod_PostData<Service > > StreamedService;
};

}  // namespace bitclave


#endif  // GRPC__2erpc_2fcontrol_2eproto__INCLUDED
